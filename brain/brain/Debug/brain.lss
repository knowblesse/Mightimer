
brain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00807000  00807000  00000164  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000193  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000027da  00000000  00000000  000001c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000216c  00000000  00000000  0000299b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000274  00000000  00000000  00004b07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00004d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000f0f  00000000  00000000  00004da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00005caf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000000e2  000000e2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00005cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.main    00000024  000000a8  000000a8  0000011c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.__dummy_fini 00000002  000000ea  000000ea  0000015e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__dummy_funcs_on_exit 00000002  000000ec  000000ec  00000160  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_simulator_exit 00000002  000000ee  000000ee  00000162  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.exit    00000016  000000cc  000000cc  00000140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text._Exit   00000004  000000e6  000000e6  0000015a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  10:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  14:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  1c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  20:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  2c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  30:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  34:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  38:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  40:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  44:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  48:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  4c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  50:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  54:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  58:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  5c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  60:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  68:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  6c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  70:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  74:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  78:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  7c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  80:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  84:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  88:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  8c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e7       	ldi	r29, 0x7F	; 127
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 54 00 	call	0xa8	; 0xa8 <_etext>
  a0:	0c 94 66 00 	jmp	0xcc	; 0xcc <exit>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>

Disassembly of section .text:

000000e2 <__bad_interrupt>:
  e2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000000a8 <main>:
		_delay_ms(4000);
		data++;
    }
	*/
	//Digital Output Pin Setup
	PORTA.DIRSET |= PIN7_bm; // Chip Select Pin
  a8:	e0 e0       	ldi	r30, 0x00	; 0
  aa:	f4 e0       	ldi	r31, 0x04	; 4
  ac:	81 81       	ldd	r24, Z+1	; 0x01
  ae:	80 68       	ori	r24, 0x80	; 128
  b0:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET |= (PIN1_bm & PIN2_bm); // LCD Reset, A0 Pin Output
  b2:	e0 e4       	ldi	r30, 0x40	; 64
  b4:	f4 e0       	ldi	r31, 0x04	; 4
  b6:	81 81       	ldd	r24, Z+1	; 0x01
  b8:	81 83       	std	Z+1, r24	; 0x01
	
	//SPI Setup
	SPI0.CTRLA |= SPI_MASTER_bm;
  ba:	e0 e4       	ldi	r30, 0x40	; 64
  bc:	f9 e0       	ldi	r31, 0x09	; 9
  be:	80 81       	ld	r24, Z
  c0:	80 62       	ori	r24, 0x20	; 32
  c2:	80 83       	st	Z, r24
	SPI0.CTRLA |= SPI_ENABLE_bm;
  c4:	80 81       	ld	r24, Z
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	80 83       	st	Z, r24
  ca:	ff cf       	rjmp	.-2      	; 0xca <main+0x22>

Disassembly of section .text.__dummy_fini:

000000ea <_fini>:
  ea:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000ec <__funcs_on_exit>:
  ec:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000ee <__simulator_exit>:
  ee:	08 95       	ret

Disassembly of section .text.exit:

000000cc <exit>:
  cc:	ec 01       	movw	r28, r24
  ce:	0e 94 76 00 	call	0xec	; 0xec <__funcs_on_exit>
  d2:	0e 94 75 00 	call	0xea	; 0xea <_fini>
  d6:	ce 01       	movw	r24, r28
  d8:	0e 94 77 00 	call	0xee	; 0xee <__simulator_exit>
  dc:	ce 01       	movw	r24, r28
  de:	0e 94 73 00 	call	0xe6	; 0xe6 <_Exit>

Disassembly of section .text._Exit:

000000e6 <_Exit>:
  e6:	0e 94 52 00 	call	0xa4	; 0xa4 <_exit>
